{
    "openapi": "3.0.3",
    "info": {
        "title": "Product Ordering",
        "description": "Product Ordering application",
        "version": "1.3.4"
    },
    "servers": [
        {
            "url": "http://product-ordering-service.ordering-management/api/v1"
        }
    ],
    "paths": {
        "/cancelProductOrder": {
            "get": {
                "operationId": "getCancelProductOrderCollection",
                "tags": [
                    "CancelProductOrder"
                ],
                "responses": {
                    "200": {
                        "description": "CancelProductOrder collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CancelProductOrder"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "schema": {
                                    "type": "integer",
                                    "description": "Actual number of items returned in the response body"
                                }
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "schema": {
                                    "type": "integer",
                                    "description": "Total number of items matching criteria"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of CancelProductOrder resources.",
                "description": "Retrieves the collection of CancelProductOrder resources.",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Filter fields",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Filter id",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "id[]",
                        "in": "query",
                        "description": "Filter id[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter id[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "href",
                        "in": "query",
                        "description": "Filter href",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "href[]",
                        "in": "query",
                        "description": "Filter href[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter href[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "cancellationReason",
                        "in": "query",
                        "description": "Filter cancellationReason",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "cancellationReason[]",
                        "in": "query",
                        "description": "Filter cancellationReason[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter cancellationReason[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "effectiveCancellationDate",
                        "in": "query",
                        "description": "Filter effectiveCancellationDate",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "effectiveCancellationDate[]",
                        "in": "query",
                        "description": "Filter effectiveCancellationDate[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "requestedCancellationDate",
                        "in": "query",
                        "description": "Filter requestedCancellationDate",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "requestedCancellationDate[]",
                        "in": "query",
                        "description": "Filter requestedCancellationDate[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Filter state",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "state[]",
                        "in": "query",
                        "description": "Filter state[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter state[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "lastUpdateDate",
                        "in": "query",
                        "description": "Filter lastUpdateDate",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "lastUpdateDate[]",
                        "in": "query",
                        "description": "Filter lastUpdateDate[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "baseType",
                        "in": "query",
                        "description": "Filter baseType",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "baseType[]",
                        "in": "query",
                        "description": "Filter baseType[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter baseType[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "schemaLocation",
                        "in": "query",
                        "description": "Filter schemaLocation",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "schemaLocation[]",
                        "in": "query",
                        "description": "Filter schemaLocation[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter schemaLocation[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Requested index for start of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Requested number of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort fields",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "post": {
                "operationId": "postCancelProductOrderCollection",
                "tags": [
                    "CancelProductOrder"
                ],
                "responses": {
                    "201": {
                        "description": "CancelProductOrder resource created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CancelProductOrder"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "URI of the newly created resource",
                                "schema": {
                                    "type": "string",
                                    "description": "URI of the newly created resource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Creates a CancelProductOrder resource.",
                "description": "Creates a CancelProductOrder resource.",
                "parameters": [],
                "requestBody": {
                    "description": "The new CancelProductOrder resource",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CancelProductOrder-Create"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            }
        },
        "/cancelProductOrder/{id}": {
            "get": {
                "operationId": "getCancelProductOrder",
                "tags": [
                    "CancelProductOrder"
                ],
                "responses": {
                    "200": {
                        "description": "CancelProductOrder resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CancelProductOrder"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves a CancelProductOrder resource.",
                "description": "Retrieves a CancelProductOrder resource.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Filter fields",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "patch": {
                "operationId": "patchCancelProductOrder",
                "tags": [
                    "CancelProductOrder"
                ],
                "responses": {
                    "200": {
                        "description": "CancelProductOrder resource updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CancelProductOrder"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Updates the CancelProductOrder resource.",
                "description": "Updates the CancelProductOrder resource.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "requestBody": {
                    "description": "The updated CancelProductOrder resource",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/CancelProductOrder-Patch"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            }
        },
        "/hub": {
            "get": {
                "operationId": "getHubCollection",
                "tags": [
                    "Hub"
                ],
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "This method is there only to conform to the framework and does nothing",
                "description": "This method is there only to conform to the framework and does nothing",
                "parameters": [],
                "deprecated": false
            },
            "post": {
                "operationId": "postHubCollection",
                "tags": [
                    "Hub"
                ],
                "responses": {
                    "201": {
                        "description": "Hub resource created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Hub"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "This method subscribe to the notifications hub",
                "description": "This method subscribe to the notifications hub",
                "parameters": [],
                "requestBody": {
                    "description": "The new Hub resource",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Hub-Create"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            }
        },
        "/hub/{id}": {
            "get": {
                "operationId": "getHubItem",
                "tags": [
                    "Hub"
                ],
                "responses": {
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "This method is there only to conform to the framework and does nothing",
                "description": "This method is there only to conform to the framework and does nothing",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "delete": {
                "operationId": "deleteHubItem",
                "tags": [
                    "Hub"
                ],
                "responses": {
                    "204": {
                        "description": "Hub resource deleted"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "This method unsubscribe to a given hub",
                "description": "This method unsubscribe to a given hub",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            }
        },
        "/productOrder": {
            "get": {
                "operationId": "getProductOrderCollection",
                "tags": [
                    "ProductOrder"
                ],
                "responses": {
                    "200": {
                        "description": "ProductOrder collection",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductOrder"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "schema": {
                                    "type": "integer",
                                    "description": "Actual number of items returned in the response body"
                                }
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "schema": {
                                    "type": "integer",
                                    "description": "Total number of items matching criteria"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves the collection of ProductOrder resources.",
                "description": "Retrieves the collection of ProductOrder resources.",
                "parameters": [
                    {
                        "name": "poiExternalIdentifier[id]",
                        "in": "query",
                        "description": "Filter poiExternalIdentifier[id]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "poiExternalIdentifier[externalIdentifierType]",
                        "in": "query",
                        "description": "Filter poiExternalIdentifier[externalIdentifierType]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "poiExternalIdentifier[owner]",
                        "in": "query",
                        "description": "Filter poiExternalIdentifier[owner]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "poi.productOffering[id]",
                        "in": "query",
                        "description": "Filter poi.productOffering[id]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "poi.productOffering[id][]",
                        "in": "query",
                        "description": "Filter poi.productOffering[id][]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array"
                        },
                        "style": "deepObject",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "relatedParty[id]",
                        "in": "query",
                        "description": "Filter relatedParty[id]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "relatedParty[role]",
                        "in": "query",
                        "description": "Filter relatedParty[role]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "buyer"
                            ]
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "orderDate[before]",
                        "in": "query",
                        "description": "Filter orderDate[before]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "orderDate[strictly_before]",
                        "in": "query",
                        "description": "Filter orderDate[strictly_before]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "orderDate[after]",
                        "in": "query",
                        "description": "Filter orderDate[after]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "orderDate[strictly_after]",
                        "in": "query",
                        "description": "Filter orderDate[strictly_after]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Filter fields",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Filter id",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "id[]",
                        "in": "query",
                        "description": "Filter id[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter id[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "href",
                        "in": "query",
                        "description": "Filter href",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "href[]",
                        "in": "query",
                        "description": "Filter href[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter href[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Filter category",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "category[]",
                        "in": "query",
                        "description": "Filter category[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter category[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "productOrderSpecification",
                        "in": "query",
                        "description": "Filter productOrderSpecification",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "productOrderSpecification[]",
                        "in": "query",
                        "description": "Filter productOrderSpecification[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter productOrderSpecification[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Filter description",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Filter state",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "state[]",
                        "in": "query",
                        "description": "Filter state[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter state[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "externalIdentifier.id",
                        "in": "query",
                        "description": "Filter externalIdentifier.id",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "externalIdentifier.externalIdentifierType",
                        "in": "query",
                        "description": "Filter externalIdentifier.externalIdentifierType",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "externalIdentifier.externalIdentifierType[]",
                        "in": "query",
                        "description": "Filter externalIdentifier.externalIdentifierType[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter externalIdentifier.externalIdentifierType[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "externalIdentifier.owner",
                        "in": "query",
                        "description": "Filter externalIdentifier.owner",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "externalIdentifier.owner[]",
                        "in": "query",
                        "description": "Filter externalIdentifier.owner[]",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "description": "Filter externalIdentifier.owner[]"
                            }
                        },
                        "style": "form",
                        "explode": true,
                        "allowReserved": false
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Requested index for start of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Requested number of resources to be provided in response",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort fields",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "post": {
                "operationId": "postProductOrderCollection",
                "tags": [
                    "ProductOrder"
                ],
                "responses": {
                    "201": {
                        "description": "ProductOrder resource created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductOrder"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "URI of the newly created resource",
                                "schema": {
                                    "type": "string",
                                    "description": "URI of the newly created resource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Creates a ProductOrder resource.",
                "description": "Creates a ProductOrder resource.",
                "parameters": [],
                "requestBody": {
                    "description": "The new ProductOrder resource",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductOrder-Create"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            }
        },
        "/productOrder/{id}": {
            "get": {
                "operationId": "getProductOrder",
                "tags": [
                    "ProductOrder"
                ],
                "responses": {
                    "200": {
                        "description": "ProductOrder resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductOrder"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves a ProductOrder resource.",
                "description": "Retrieves a ProductOrder resource.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Filter fields",
                        "required": false,
                        "deprecated": false,
                        "allowEmptyValue": true,
                        "schema": {
                            "type": "string"
                        },
                        "style": "form",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "patch": {
                "operationId": "patchProductOrder",
                "tags": [
                    "ProductOrder"
                ],
                "responses": {
                    "200": {
                        "description": "ProductOrder resource updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductOrder"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Updates the ProductOrder resource.",
                "description": "Updates the ProductOrder resource.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Resource identifier",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "requestBody": {
                    "description": "The updated ProductOrder resource",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductOrder-Patch"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            }
        },
        "/productOrder/{poId}/productOrderItem/{poiId}": {
            "get": {
                "operationId": "getProductOrderItem",
                "tags": [
                    "ProductOrderItem"
                ],
                "responses": {
                    "200": {
                        "description": "ProductOrderItem resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductOrderItem"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Retrieves a ProductOrderItem resource.",
                "description": "Retrieves a ProductOrderItem resource.",
                "parameters": [
                    {
                        "name": "poId",
                        "in": "path",
                        "description": "Parent ProductOrder id",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "poiId",
                        "in": "path",
                        "description": "ProductOrderItem id",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "deprecated": false
            },
            "patch": {
                "operationId": "patchProductOrderItem",
                "tags": [
                    "ProductOrderItem"
                ],
                "responses": {
                    "200": {
                        "description": "ProductOrderItem resource updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductOrderItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "summary": "Updates the ProductOrderItem resource.",
                "description": "Updates the ProductOrderItem resource.",
                "parameters": [
                    {
                        "name": "poId",
                        "in": "path",
                        "description": "Parent ProductOrder id",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    },
                    {
                        "name": "poiId",
                        "in": "path",
                        "description": "ProductOrderItem id",
                        "required": true,
                        "deprecated": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        },
                        "style": "simple",
                        "explode": false,
                        "allowReserved": false
                    }
                ],
                "requestBody": {
                    "description": "The updated ProductOrderItem resource",
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductOrderItem-Patch"
                            }
                        }
                    },
                    "required": true
                },
                "deprecated": false
            }
        },
        "/doc": {
            "get": {
                "operationId": "getDoc",
                "summary": "Retrieves Openapi specification json.",
                "description": "Retrieves Openapi specification json.",
                "responses": {
                    "200": {
                        "description": "Openapi specification returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Json representing Openapi specification",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "operationId": "getStatus",
                "summary": "Retrieves status of service(s).",
                "description": "Retrieves status of service(s).",
                "responses": {
                    "200": {
                        "description": "Status of service(s) ok.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "CancelProductOrder-Create": {
                "type": "object",
                "description": "Request for cancellation an existing product order",
                "properties": {
                    "cancellationReason": {
                        "description": "Reason why the order is cancelled.",
                        "type": "string"
                    },
                    "productOrder": {
                        "$ref": "#/components/schemas/ProductOrderRef"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "required": [
                    "productOrder"
                ],
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "CancelProductOrder-Patch": {
                "type": "object",
                "description": "Request for cancellation an existing product order",
                "properties": {
                    "state": {
                        "description": "Possible values for the state of a task",
                        "type": "string",
                        "enum": [
                            "acknowledged",
                            "terminatedWithError",
                            "inProgress",
                            "done"
                        ],
                        "example": "acknowledged"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Hub-Create": {
                "type": "object",
                "description": "This object represents the notifications hub",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "callback": {
                        "type": "string"
                    },
                    "query": {
                        "type": "string"
                    },
                    "topic": {
                        "type": "string"
                    },
                    "allocatedQueue": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOrder-Create": {
                "type": "object",
                "description": "A Product Order is a type of order which can be used to place an order between a customer\nand a service provider or between a service provider and a partner and vice versa",
                "properties": {
                    "category": {
                        "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. enterprise, residential, ...)",
                        "type": "string"
                    },
                    "productOrderSpecification": {
                        "description": "Specification of the Product Order",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the product order",
                        "type": "string"
                    },
                    "expectedCompletionDate": {
                        "description": "Expected delivery date amended by the provider",
                        "type": "string",
                        "format": "date-time"
                    },
                    "channel": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedChannel"
                        }
                    },
                    "note": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        }
                    },
                    "productOfferingQualification": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductOfferingQualificationRef"
                        }
                    },
                    "productOrderItem": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductOrderItem"
                        },
                        "minItems": 1
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedParty"
                        }
                    },
                    "billingAccount": {
                        "$ref": "#/components/schemas/BillingAccountRef"
                    },
                    "orderTotalPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderPrice"
                        }
                    },
                    "quote": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QuoteRef"
                        }
                    },
                    "externalIdentifier": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalIdentifier"
                        }
                    },
                    "requestedCompletionDate": {
                        "description": "Requested delivery date from the requestor perspective",
                        "type": "string",
                        "format": "date-time"
                    },
                    "requestedStartDate": {
                        "description": "Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "required": [
                    "productOrderItem",
                    "relatedParty"
                ],
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOrder-Patch": {
                "type": "object",
                "description": "A Product Order is a type of order which can be used to place an order between a customer\nand a service provider or between a service provider and a partner and vice versa",
                "properties": {
                    "category": {
                        "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. enterprise, residential, ...)",
                        "type": "string"
                    },
                    "completionDate": {
                        "description": "Date when the order was completed",
                        "type": "string",
                        "format": "date-time"
                    },
                    "description": {
                        "description": "Description of the product order",
                        "type": "string"
                    },
                    "expectedCompletionDate": {
                        "description": "Expected delivery date amended by the provider",
                        "type": "string",
                        "format": "date-time"
                    },
                    "orderDate": {
                        "description": "Date when the order was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "channel": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedChannel"
                        }
                    },
                    "note": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        }
                    },
                    "productOfferingQualification": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductOfferingQualificationRef"
                        }
                    },
                    "productOrderItem": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductOrderItem"
                        },
                        "minItems": 1
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedParty"
                        }
                    },
                    "jeopardyAlert": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JeopardyAlert"
                        }
                    },
                    "milestone": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Milestone"
                        }
                    },
                    "errorMessage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        }
                    },
                    "billingAccount": {
                        "$ref": "#/components/schemas/BillingAccountRef"
                    },
                    "state": {
                        "description": "Possible values for the state of the order",
                        "type": "string",
                        "enum": [
                            "acknowledged.init",
                            "acknowledged.steering",
                            "acknowledged.accepted",
                            "acknowledged",
                            "rejected",
                            "pending",
                            "held",
                            "inProgress",
                            "inProgress.accepted",
                            "cancelled",
                            "completed",
                            "failed",
                            "partial",
                            "assessingCancellation",
                            "pendingCancellation"
                        ],
                        "example": "acknowledged.init"
                    },
                    "orderTotalPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderPrice"
                        }
                    },
                    "externalIdentifier": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalIdentifier"
                        }
                    },
                    "requestedCompletionDate": {
                        "description": "Requested delivery date from the requestor perspective",
                        "type": "string",
                        "format": "date-time"
                    },
                    "requestedStartDate": {
                        "description": "Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "required": [
                    "productOrderItem",
                    "relatedParty"
                ],
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOrderItem-Create": {
                "type": "object",
                "description": "An identified part of the order. A product order is decomposed into one or more order\nitems.",
                "required": [
                    "id",
                    "action"
                ],
                "properties": {
                    "id": {
                        "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)",
                        "type": "string"
                    },
                    "quantity": {
                        "description": "Quantity ordered",
                        "type": "integer"
                    },
                    "action": {
                        "description": "action to be performed on the product",
                        "type": "string",
                        "enum": [
                            "add",
                            "modify",
                            "delete",
                            "noChange",
                            null
                        ],
                        "example": "add"
                    },
                    "appointment": {
                        "$ref": "#/components/schemas/AppointmentRef"
                    },
                    "itemTerm": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderTerm"
                        }
                    },
                    "product": {
                        "$ref": "#/components/schemas/ProductRefOrValue"
                    },
                    "productOrderItemRelationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderItemRelationship"
                        }
                    },
                    "state": {
                        "description": "Possible values for the state of the product order item",
                        "type": "string",
                        "enum": [
                            "acknowledged.init",
                            "acknowledged.steering",
                            "acknowledged.accepted",
                            "acknowledged",
                            "rejected",
                            "pending",
                            "held",
                            "inProgress",
                            "inProgress.accepted",
                            "cancelled",
                            "completed",
                            "failed",
                            "assessingCancellation",
                            "pendingCancellation"
                        ],
                        "example": "acknowledged.init"
                    },
                    "itemTotalPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderPrice"
                        }
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "productOfferingQualificationItem": {
                        "$ref": "#/components/schemas/ProductOfferingQualificationItemRef"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOrderItem-Patch": {
                "type": "object",
                "description": "An identified part of the order. A product order is decomposed into one or more order\nitems.",
                "required": [
                    "id",
                    "action"
                ],
                "properties": {
                    "id": {
                        "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)",
                        "type": "string"
                    },
                    "quantity": {
                        "description": "Quantity ordered",
                        "type": "integer"
                    },
                    "action": {
                        "description": "action to be performed on the product",
                        "type": "string",
                        "enum": [
                            "add",
                            "modify",
                            "delete",
                            "noChange",
                            null
                        ],
                        "example": "add"
                    },
                    "appointment": {
                        "$ref": "#/components/schemas/AppointmentRef"
                    },
                    "itemTerm": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderTerm"
                        }
                    },
                    "product": {
                        "$ref": "#/components/schemas/ProductRefOrValue"
                    },
                    "productOrderItemRelationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderItemRelationship"
                        }
                    },
                    "state": {
                        "description": "Possible values for the state of the product order item",
                        "type": "string",
                        "enum": [
                            "acknowledged.init",
                            "acknowledged.steering",
                            "acknowledged.accepted",
                            "acknowledged",
                            "rejected",
                            "pending",
                            "held",
                            "inProgress",
                            "inProgress.accepted",
                            "cancelled",
                            "completed",
                            "failed",
                            "assessingCancellation",
                            "pendingCancellation"
                        ],
                        "example": "acknowledged.init"
                    },
                    "jeopardyAlert": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JeopardyAlert"
                        }
                    },
                    "milestone": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Milestone"
                        }
                    },
                    "errorMessage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        }
                    },
                    "itemTotalPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderPrice"
                        }
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "productOfferingQualificationItem": {
                        "$ref": "#/components/schemas/ProductOfferingQualificationItemRef"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "AgreementItemRef": {
                "type": "object",
                "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
                "properties": {
                    "id": {
                        "description": "Unique Identifier of the AgreementItem within its containing entity, automatically fill if not provided",
                        "type": "string"
                    },
                    "href": {
                        "description": "Hyperlink to the agreementItemRef",
                        "type": "string"
                    },
                    "agreementItemId": {
                        "description": "Identifier of the agreement.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Appointment": {
                "description": "An Appointment is an arrangement to do something or meet someone at a particular time, at a place (for face to face appointment) or in a contact medium (for phone appointment).",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AppointmentRef"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "category": {
                                "description": "Business category : intervention for example or to be more precise after SalesIntervention, orderDeliveryIntervention,...",
                                "type": "string"
                            },
                            "relatedParty": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RelatedParty"
                                }
                            }
                        },
                        "required": [
                            "id"
                        ],
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "AppointmentRef": {
                "type": "object",
                "description": "Refers an appointment, such as a Customer presentation or internal meeting or site visit",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "The identifier of the referred appointment",
                        "type": "string"
                    },
                    "href": {
                        "description": "The reference of the appointment",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "BillingAccount": {
                "description": "BillingAccount. A BillingAccount is a detailed description of a bill structure.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BillingAccountRef"
                    },
                    {
                        "type": "object",
                        "required": [
                            "id"
                        ],
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "BillingAccountRef": {
                "type": "object",
                "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure.",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the billing account",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the billing account",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the billing account",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "CancelProductOrder": {
                "type": "object",
                "description": "Request for cancellation an existing product order",
                "properties": {
                    "id": {
                        "description": "id of the cancellation request (this is not an order id)",
                        "type": "string"
                    },
                    "href": {
                        "description": "Hyperlink to access the cancellation request",
                        "type": "string"
                    },
                    "cancellationReason": {
                        "description": "Reason why the order is cancelled.",
                        "type": "string"
                    },
                    "effectiveCancellationDate": {
                        "description": "Date when the order is cancelled.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "requestedCancellationDate": {
                        "description": "Date we receive the order cancellation request.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "productOrder": {
                        "$ref": "#/components/schemas/ProductOrderRef"
                    },
                    "state": {
                        "description": "Possible values for the state of a task",
                        "type": "string",
                        "enum": [
                            "acknowledged",
                            "terminatedWithError",
                            "inProgress",
                            "done"
                        ],
                        "example": "acknowledged"
                    },
                    "lastUpdateDate": {
                        "description": "Date when the cancel product order was updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Characteristic": {
                "type": "object",
                "description": "Describes a given characteristic of an object or entity.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the characteristic",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related characteristic.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the characteristic",
                        "type": "string"
                    },
                    "value": {
                        "$ref": "#/components/schemas/Any"
                    },
                    "valueType": {
                        "description": "Data type of the value of the characteristic",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "required": [
                    "id",
                    "valueType"
                ],
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "CharacteristicChoiceValue": {
                "type": "object",
                "description": "Describes a given characteristic value of an object or entity.",
                "properties": {
                    "id": {
                        "description": "Characteristic choice value id",
                        "type": "string"
                    },
                    "name": {
                        "description": "Characteristic choice value name",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Comment": {
                "description": "Extension of Note",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Note"
                    },
                    {
                        "type": "object",
                        "required": [
                            "text"
                        ],
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "ContactMedium": {
                "type": "object",
                "description": "Indicates the contact medium that could be used to contact the party.",
                "properties": {
                    "mediumType": {
                        "description": "Type of the contact medium, such as: email address, telephone number, postal address",
                        "type": "string"
                    },
                    "preferred": {
                        "description": "If true, indicates that is the preferred contact medium",
                        "type": "boolean"
                    },
                    "characteristic": {
                        "$ref": "#/components/schemas/MediumCharacteristic"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Error": {
                "type": "object",
                "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
                "required": [
                    "code",
                    "reason"
                ],
                "properties": {
                    "code": {
                        "description": "Application relevant detail, defined in the API or a common list.",
                        "type": "string"
                    },
                    "reason": {
                        "description": "Explanation of the reason for the error which can be shown to a client user.",
                        "type": "string"
                    },
                    "message": {
                        "description": "More details and corrective actions related to the error which can be shown to a client user.",
                        "type": "string"
                    },
                    "status": {
                        "description": "HTTP Error code extension",
                        "type": "string"
                    },
                    "referenceError": {
                        "format": "uri",
                        "description": "URI of documentation describing the error.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ErrorMessage": {
                "type": "object",
                "description": "ErrorMessage represents an error that causes a status change in a product order.",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "string"
                    },
                    "message": {
                        "description": "More details and corrective actions related to the error.",
                        "type": "string"
                    },
                    "reason": {
                        "description": "Explanation of the reason for the error.",
                        "type": "string"
                    },
                    "referenceError": {
                        "description": "URI of documentation describing the error",
                        "type": "string"
                    },
                    "status": {
                        "description": "Error code extension like sys-ABC-2001.",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "Error Message created time",
                        "type": "string",
                        "format": "date-time"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ErrorNote": {
                "description": "Extension of Note",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Note"
                    },
                    {
                        "type": "object",
                        "required": [
                            "text"
                        ],
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "ExternalIdentifier": {
                "type": "object",
                "description": "An ID and its informations (type, owner, product linked)\ngiven by the consumer and only understandable by him (to facilitate his searches afterwards).",
                "properties": {
                    "id": {
                        "description": "Unique Identifier of the note within its containing entity, automatically fill if not provided",
                        "type": "string"
                    },
                    "externalIdentifierType": {
                        "description": "Type of the external identifier. Example : VIA",
                        "type": "string"
                    },
                    "owner": {
                        "description": "Owner of the identifier",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "GeographicAddress": {
                "description": "Structured textual way of describing how to find a Property in an urban area (country properties\nare often defined differently).",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "city": {
                                "maxLength": 50,
                                "description": "City that the address is in",
                                "type": "string"
                            },
                            "country": {
                                "description": "Country that the address is in",
                                "type": "string"
                            },
                            "locality": {
                                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]",
                                "type": "string"
                            },
                            "postcode": {
                                "minLength": 5,
                                "maxLength": 5,
                                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)",
                                "type": "string"
                            },
                            "stateOrProvince": {
                                "description": "the State or Province that the address is in",
                                "type": "string"
                            },
                            "streetName": {
                                "maxLength": 50,
                                "description": "Name of the street or other street type",
                                "type": "string"
                            },
                            "streetNr": {
                                "maxLength": 10,
                                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses",
                                "type": "string"
                            },
                            "streetNrSuffix": {
                                "maxLength": 20,
                                "description": "the first street number suffix",
                                "type": "string"
                            },
                            "streetType": {
                                "maxLength": 20,
                                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf",
                                "type": "string"
                            },
                            "geographicSubAddress": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GeographicSubAddress"
                                }
                            },
                            "geographicLocation": {
                                "$ref": "#/components/schemas/GeographicLocation"
                            }
                        },
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "GeographicAddressRivoli": {
                "description": "Extension of GeographicAddress",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GeographicAddress"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "cityCode": {
                                "minLength": 5,
                                "maxLength": 5,
                                "description": "Code insee",
                                "type": "string"
                            },
                            "streetCode": {
                                "minLength": 4,
                                "maxLength": 4,
                                "description": "Code rivoli",
                                "type": "string"
                            }
                        },
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "GeographicLocation": {
                "description": "Structured textual way of describing a geographic location.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "geoCodeX": {
                                "description": "x coordinate",
                                "type": "string"
                            },
                            "geoCodeY": {
                                "description": "y coordinate",
                                "type": "string"
                            },
                            "geoCoordinateType": {
                                "description": "Type of the geo coordinate",
                                "type": "string"
                            }
                        },
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "GeographicSite": {
                "description": "Geographic site: specialization of Place",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "geographicAddress": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GeographicAddress"
                                }
                            }
                        },
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "GeographicSiteBuilding": {
                "description": "Extension of GeographicSite",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GeographicSite"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "buildingType": {
                                "description": "Building type",
                                "type": "string"
                            },
                            "buildingCode": {
                                "description": "Building identifier",
                                "type": "string"
                            }
                        },
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "GeographicSiteCustomerTermination": {
                "description": "Extension of GeographicSite",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GeographicSite"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "customerTerminationNumber": {
                                "description": "Customer termination number",
                                "type": "string"
                            },
                            "customerTerminationType": {
                                "description": "Customer termination type",
                                "type": "string"
                            }
                        },
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "GeographicSubAddress": {
                "type": "object",
                "description": "Representation of a GeographicSubAddress\nIt is used for addressing within a property in an urban area (country properties are often defined\ndifferently). It may refer to a building, a building cluster, or a floor of a multistory building.",
                "properties": {
                    "id": {
                        "description": "Unique Identifier of the subAddress, automatically fill if not provided",
                        "type": "string"
                    },
                    "href": {
                        "description": "Link to the subAddress",
                        "type": "string"
                    },
                    "buildingName": {
                        "maxLength": 60,
                        "description": "allows for buildings that have well-known names",
                        "type": "string"
                    },
                    "levelNumber": {
                        "maxLength": 50,
                        "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2",
                        "type": "string"
                    },
                    "levelType": {
                        "description": "describes level types within a building",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the subAddress to identify it with a meaningful identification",
                        "type": "string"
                    },
                    "privateStreetName": {
                        "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office.",
                        "type": "string"
                    },
                    "privateStreetNumber": {
                        "description": "private streets numbers internal to a private street",
                        "type": "string"
                    },
                    "subAddressType": {
                        "description": "Type of subAddress : it can be a subunit or a private street",
                        "type": "string"
                    },
                    "subUnitNumber": {
                        "description": "the discriminator used for the subunit\n\t *\t\t\t\toften just a simple number e.g. FLAT 5, may also be a range",
                        "type": "string"
                    },
                    "subUnitType": {
                        "description": "the type of subunit\n\t *              e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Hub": {
                "type": "object",
                "description": "This object represents the notifications hub",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "callback": {
                        "type": "string"
                    },
                    "query": {
                        "type": "string"
                    },
                    "topic": {
                        "type": "string"
                    },
                    "allocatedQueue": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Individual": {
                "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RelatedParty"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "familyName": {
                                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context",
                                "type": "string"
                            },
                            "fullName": {
                                "description": "Full name flatten (first, middle, and last names)",
                                "type": "string"
                            },
                            "gender": {
                                "description": "Gender",
                                "type": "string"
                            },
                            "givenName": {
                                "description": "First name of the individual",
                                "type": "string"
                            },
                            "contactMedium": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ContactMedium"
                                }
                            }
                        },
                        "required": [
                            "id",
                            "@referredType"
                        ],
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "JeopardyAlert": {
                "type": "object",
                "description": "A JeopardyAlert represents a predicted exception during a service order processing that would brings\nrisk to complete successfully the product order.",
                "properties": {
                    "id": {
                        "description": "Identifier of the JeopardyAlert, automatically fill if not provided",
                        "type": "string"
                    },
                    "alertDate": {
                        "description": "The date that the alert issued",
                        "type": "string",
                        "format": "date-time"
                    },
                    "exception": {
                        "description": "The exception associated with this jeopardy alert",
                        "type": "string"
                    },
                    "jeopardyType": {
                        "description": "The type of jeopardy/risk like Normal, Hazard, Critical, ...",
                        "type": "string"
                    },
                    "message": {
                        "description": "The message of the alert",
                        "type": "string"
                    },
                    "name": {
                        "description": "Used to give a name to the jeopardy alert",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "MediumCharacteristic": {
                "type": "object",
                "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
                "properties": {
                    "city": {
                        "description": "The city",
                        "type": "string"
                    },
                    "contactType": {
                        "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation\u2026",
                        "type": "string"
                    },
                    "country": {
                        "description": "The country",
                        "type": "string"
                    },
                    "emailAddress": {
                        "format": "email",
                        "description": "Full email address in standard format",
                        "externalDocs": {
                            "url": "http://schema.org/email"
                        },
                        "type": "string"
                    },
                    "phoneNumber": {
                        "maxLength": 15,
                        "description": "The primary phone number of the contact",
                        "type": "string"
                    },
                    "postCode": {
                        "description": "Postcode",
                        "type": "string"
                    },
                    "street1": {
                        "description": "Describes the street",
                        "type": "string"
                    },
                    "street2": {
                        "description": "Complementary street description",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Milestone": {
                "type": "object",
                "description": "Milestone represents an action or event marking a significant change or stage in processing of a\nproduct order.",
                "properties": {
                    "id": {
                        "description": "Identifier of the Milestone, automatically fill if not provided",
                        "type": "string"
                    },
                    "description": {
                        "description": "The message of the milestone",
                        "type": "string"
                    },
                    "message": {
                        "description": "The message of the milestone",
                        "type": "string"
                    },
                    "milestoneDate": {
                        "description": "The date that the milestone happens.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "description": "Used to give a name to the milestone",
                        "type": "string"
                    },
                    "status": {
                        "description": "The milestone status.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Money": {
                "type": "object",
                "description": "A base / value business entity used to represent money.",
                "required": [
                    "unit",
                    "value"
                ],
                "properties": {
                    "unit": {
                        "description": "Currency (ISO4217 norm uses 3 letters to define the currency).",
                        "type": "string"
                    },
                    "value": {
                        "description": "A positive floating point number.",
                        "type": "number"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Note": {
                "type": "object",
                "description": "Extra information about a given entity",
                "properties": {
                    "id": {
                        "description": "Unique Identifier of the note within its containing entity, automatically fill if not provided",
                        "type": "string"
                    },
                    "author": {
                        "description": "Author of the note",
                        "type": "string"
                    },
                    "date": {
                        "description": "Date of the note",
                        "type": "string",
                        "format": "date-time"
                    },
                    "text": {
                        "description": "Text of the note",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "required": [
                    "text"
                ],
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "OrderItemRelationship": {
                "type": "object",
                "description": "OrderItemRelationship",
                "properties": {
                    "id": {
                        "description": "Identifier of the order item",
                        "type": "string"
                    },
                    "relationshipType": {
                        "description": "The type of order item relationship",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "required": [
                    "relationshipType"
                ],
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "OrderPrice": {
                "type": "object",
                "description": "An amount, usually of money, that represents the actual price paid by the Customer for this item or this order.",
                "properties": {
                    "billingAccount": {
                        "description": "A reference to a billing account used for paid the order price charge.",
                        "$ref": "#/components/schemas/BillingAccountRef"
                    },
                    "description": {
                        "description": "A narrative that explains in detailthe semantics of this order item price.",
                        "type": "string"
                    },
                    "name": {
                        "description": "A short descriptive name such as 'Subscription price'.",
                        "type": "string"
                    },
                    "price": {
                        "description": "A structure used to define price amount.",
                        "$ref": "#/components/schemas/Price"
                    },
                    "priceType": {
                        "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth.",
                        "type": "string"
                    },
                    "recurringChargePeriod": {
                        "description": "Could be month, week...",
                        "type": "string"
                    },
                    "unitOfMeasure": {
                        "description": "Could be minutes, GB...",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "required": [
                    "priceType"
                ],
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "OrderTakingNote": {
                "description": "Extension of Note",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Note"
                    },
                    {
                        "type": "object",
                        "required": [
                            "text"
                        ],
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "OrderTerm": {
                "type": "object",
                "description": "OrderTerm",
                "properties": {
                    "description": {
                        "description": "Description of the productOrderTerm.",
                        "type": "string"
                    },
                    "duration": {
                        "description": "Duration of the productOrderTerm.",
                        "$ref": "#/components/schemas/Quantity"
                    },
                    "name": {
                        "description": "Name of the productOrderTerm.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Organization": {
                "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RelatedParty"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "tradingName": {
                                "description": "Name that the organization (unit) trades under",
                                "type": "string"
                            },
                            "organizationType": {
                                "description": "Type of Organization (company, department...)",
                                "type": "string"
                            },
                            "organizationIdentification": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OrganizationIdentification"
                                }
                            }
                        },
                        "required": [
                            "id",
                            "@referredType"
                        ],
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "OrganizationIdentification": {
                "type": "object",
                "description": "Represents our registration of information used as proof of identity by an organization",
                "properties": {
                    "identificationId": {
                        "description": "Identifier",
                        "type": "string"
                    },
                    "identificationType": {
                        "description": "Type of identification information used to identify the company in a country or internationally",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Price": {
                "type": "object",
                "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration.",
                "properties": {
                    "taxRate": {
                        "description": "Tax rate.",
                        "type": "number"
                    },
                    "percentage": {
                        "description": "Percentage to apply for ProdOfferPriceAlteration.",
                        "type": "number"
                    },
                    "dutyFreeAmount": {
                        "description": "All taxes excluded amount (expressed in the given currency).",
                        "$ref": "#/components/schemas/Money"
                    },
                    "taxIncludedAmount": {
                        "description": "All taxes excluded amount (expressed in the given currency).",
                        "$ref": "#/components/schemas/Money"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOfferingQualificationItemRef": {
                "type": "object",
                "description": "It's a productOfferingQualification item that has been executed previously.",
                "properties": {
                    "id": {
                        "description": "Id of an item of a product offering qualification.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "productOfferingQualificationHref": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "productOfferingQualificationId": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "productOfferingQualificationName": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOfferingQualificationItemValue": {
                "description": "Extension of ProductOfferingQualificationItemRef",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ProductOfferingQualificationItemRef"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "characteristics": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Characteristic"
                                }
                            },
                            "eligibility": {
                                "type": "string"
                            },
                            "qualificationDate": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "discriminator": {
                            "propertyName": "@type"
                        }
                    }
                ]
            },
            "ProductOfferingQualificationRef": {
                "type": "object",
                "description": "It's a productOfferingQualification that has been executed previously",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOfferingRef": {
                "type": "object",
                "description": "ProductOffering reference. A product offering represents entities that are orderable from the\nprovider of the catalog, this resource includes pricing information.",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "productOfferingType": {
                        "description": "contrat/play/set identification",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOrder": {
                "type": "object",
                "description": "A Product Order is a type of order which can be used to place an order between a customer\nand a service provider or between a service provider and a partner and vice versa",
                "properties": {
                    "id": {
                        "description": "ID created on repository side (OM system)",
                        "type": "string"
                    },
                    "href": {
                        "description": "Hyperlink to access the order",
                        "type": "string"
                    },
                    "cancellationDate": {
                        "description": "Date when the order is cancelled. This is used when order is cancelled.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "cancellationReason": {
                        "description": "Reason why the order is cancelled. This is used when order is cancelled.",
                        "type": "string"
                    },
                    "category": {
                        "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. enterprise, residential, ...)",
                        "type": "string"
                    },
                    "productOrderSpecification": {
                        "description": "Specification of the Product Order",
                        "type": "string"
                    },
                    "completionDate": {
                        "description": "Date when the order was completed",
                        "type": "string",
                        "format": "date-time"
                    },
                    "description": {
                        "description": "Description of the product order",
                        "type": "string"
                    },
                    "expectedCompletionDate": {
                        "description": "Expected delivery date amended by the provider",
                        "type": "string",
                        "format": "date-time"
                    },
                    "orderDate": {
                        "description": "Date when the order was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "channel": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedChannel"
                        }
                    },
                    "note": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        }
                    },
                    "productOfferingQualification": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductOfferingQualificationRef"
                        }
                    },
                    "productOrderItem": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductOrderItem"
                        },
                        "minItems": 1
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedParty"
                        }
                    },
                    "jeopardyAlert": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JeopardyAlert"
                        }
                    },
                    "milestone": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Milestone"
                        }
                    },
                    "errorMessage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        }
                    },
                    "billingAccount": {
                        "$ref": "#/components/schemas/BillingAccountRef"
                    },
                    "state": {
                        "description": "Possible values for the state of the order",
                        "type": "string",
                        "enum": [
                            "acknowledged.init",
                            "acknowledged.steering",
                            "acknowledged.accepted",
                            "acknowledged",
                            "rejected",
                            "pending",
                            "held",
                            "inProgress",
                            "inProgress.accepted",
                            "cancelled",
                            "completed",
                            "failed",
                            "partial",
                            "assessingCancellation",
                            "pendingCancellation"
                        ],
                        "example": "acknowledged.init"
                    },
                    "orderTotalPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderPrice"
                        }
                    },
                    "quote": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QuoteRef"
                        }
                    },
                    "lastUpdateDate": {
                        "description": "Date when the product order or one of his product order item was updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "externalIdentifier": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalIdentifier"
                        }
                    },
                    "requestedCompletionDate": {
                        "description": "Requested delivery date from the requestor perspective",
                        "type": "string",
                        "format": "date-time"
                    },
                    "requestedStartDate": {
                        "description": "Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "required": [
                    "productOrderItem",
                    "relatedParty"
                ],
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOrderItem": {
                "type": "object",
                "description": "An identified part of the order. A product order is decomposed into one or more order\nitems.",
                "required": [
                    "id",
                    "action"
                ],
                "properties": {
                    "id": {
                        "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)",
                        "type": "string"
                    },
                    "quantity": {
                        "description": "Quantity ordered",
                        "type": "integer"
                    },
                    "action": {
                        "description": "action to be performed on the product",
                        "type": "string",
                        "enum": [
                            "add",
                            "modify",
                            "delete",
                            "noChange",
                            null
                        ],
                        "example": "add"
                    },
                    "appointment": {
                        "$ref": "#/components/schemas/AppointmentRef"
                    },
                    "itemTerm": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderTerm"
                        }
                    },
                    "product": {
                        "$ref": "#/components/schemas/ProductRefOrValue"
                    },
                    "productOrderItemRelationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderItemRelationship"
                        }
                    },
                    "state": {
                        "description": "Possible values for the state of the product order item",
                        "type": "string",
                        "enum": [
                            "acknowledged.init",
                            "acknowledged.steering",
                            "acknowledged.accepted",
                            "acknowledged",
                            "rejected",
                            "pending",
                            "held",
                            "inProgress",
                            "inProgress.accepted",
                            "cancelled",
                            "completed",
                            "failed",
                            "assessingCancellation",
                            "pendingCancellation"
                        ],
                        "example": "acknowledged.init"
                    },
                    "jeopardyAlert": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JeopardyAlert"
                        }
                    },
                    "milestone": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Milestone"
                        }
                    },
                    "errorMessage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        }
                    },
                    "itemTotalPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderPrice"
                        }
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "productOfferingQualificationItem": {
                        "$ref": "#/components/schemas/ProductOfferingQualificationItemRef"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductOrderRef": {
                "type": "object",
                "description": "ProductOrder (ProductOrder) .The product order which the recommendation is related with.",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductPrice": {
                "type": "object",
                "description": "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time.",
                "properties": {
                    "billingAccount": {
                        "description": "A reference to a billing account used for paid the order price charge.",
                        "$ref": "#/components/schemas/BillingAccountRef"
                    },
                    "description": {
                        "description": "A narrative that explains in detailthe semantics of this order item price.",
                        "type": "string"
                    },
                    "name": {
                        "description": "A short descriptive name such as 'Subscription price'.",
                        "type": "string"
                    },
                    "price": {
                        "description": "A structure used to define price amount.",
                        "$ref": "#/components/schemas/Price"
                    },
                    "priceType": {
                        "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth.",
                        "type": "string"
                    },
                    "recurringChargePeriod": {
                        "description": "Could be month, week...",
                        "type": "string"
                    },
                    "unitOfMeasure": {
                        "description": "Could be minutes, GB...",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductRefOrValue": {
                "type": "object",
                "description": "A product to be created defined by value or existing defined by reference. The polymorphic\nattributes \"@type\", \"@schemaLocation\" & \"@referredType\" are related to the product entity and not the\nRelatedProductRefOrValue class itself",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the product",
                        "type": "string"
                    },
                    "href": {
                        "description": "Hyperlink to the inventory product",
                        "type": "string"
                    },
                    "isBundle": {
                        "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering.",
                        "type": "boolean"
                    },
                    "productSerialNumber": {
                        "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router.",
                        "type": "string"
                    },
                    "place": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
                        }
                    },
                    "productCharacteristic": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Characteristic"
                        }
                    },
                    "productOffering": {
                        "$ref": "#/components/schemas/ProductOfferingRef"
                    },
                    "productSpecification": {
                        "$ref": "#/components/schemas/ProductSpecificationRef"
                    },
                    "relatedParty": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedParty"
                        }
                    },
                    "agreement": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgreementItemRef"
                        }
                    },
                    "productRelationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductRelationship"
                        }
                    },
                    "productPrice": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductPrice"
                        }
                    },
                    "externalIdentifier": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalIdentifier"
                        }
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductRelationship": {
                "type": "object",
                "description": "Linked products to the one instantiate, such as [bundled] if the product is a bundle and you want to describe the\nbundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g.",
                "required": [
                    "relationshipType",
                    "product"
                ],
                "properties": {
                    "relationshipType": {
                        "description": "A string. Type of the product relationship, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful.",
                        "type": "string"
                    },
                    "product": {
                        "description": "A product ref or value (ProductRefOrValue). A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself.",
                        "$ref": "#/components/schemas/ProductRefOrValue"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "ProductSpecificationRef": {
                "type": "object",
                "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or\nintangible object made available externally in the form of a ProductOffering to customers or other\nparties playing a party role.",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "version": {
                        "description": "Version of the product specification",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Quantity": {
                "type": "object",
                "description": "Quantity - An amount in a given unit",
                "properties": {
                    "amount": {
                        "description": "Numeric value in a given unit.",
                        "default": 1,
                        "example": 1,
                        "type": "number"
                    },
                    "units": {
                        "description": "Unit",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "QuoteRef": {
                "type": "object",
                "description": "It's a Quote that has been executed previously.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity.",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related entity.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "RelatedChannel": {
                "type": "object",
                "description": "Extra information about a given entity",
                "properties": {
                    "id": {
                        "description": "Unique Identifier of the note within its containing entity, automatically fill if not provided",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related channel.",
                        "type": "string"
                    },
                    "role": {
                        "description": "Role played by the related channel",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the related channel.",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "RelatedParty": {
                "type": "object",
                "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
                "required": [
                    "id",
                    "@referredType"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of a related entity",
                        "type": "string"
                    },
                    "href": {
                        "description": "Reference of the related entity.",
                        "type": "string"
                    },
                    "role": {
                        "description": "Role played by the related party",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "RelatedPlaceRefOrValue": {
                "type": "object",
                "description": "Related Entity reference. A related place defines a place described by reference or by value\nlinked to a specific entity. The polymorphic attributes \"@type\", \"@schemaLocation\" & \"@referredType\" are\nrelated to the place entity and not the RelatedPlaceRefOrValue class itself",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the place, automatically fill if not provided",
                        "type": "string"
                    },
                    "href": {
                        "description": "Unique reference of the place",
                        "type": "string"
                    },
                    "name": {
                        "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]",
                        "type": "string"
                    },
                    "role": {
                        "description": "Role played by the related place",
                        "type": "string"
                    },
                    "@baseType": {
                        "description": "When sub-classing, this defines the super-class",
                        "type": "string"
                    },
                    "@schemaLocation": {
                        "format": "uri",
                        "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
                        "type": "string"
                    },
                    "@referredType": {
                        "description": "The actual type of the target instance when needed for disambiguation.",
                        "type": "string"
                    },
                    "@type": {
                        "type": "string",
                        "description": "When sub-classing, this defines the sub-class entity name"
                    }
                },
                "discriminator": {
                    "propertyName": "@type"
                }
            },
            "Any": {
                "description": "Can be string or object"
            },
            "Status": {
                "type": "object",
                "description": "Status of a service in the api",
                "properties": {
                    "name": {
                        "description": "Service name",
                        "type": "string"
                    },
                    "status": {
                        "description": "Service status",
                        "type": "string",
                        "enum": [
                            "ok",
                            "ko"
                        ]
                    },
                    "version": {
                        "description": "Service version",
                        "type": "string"
                    }
                }
            },
            "StatusResponse": {
                "description": "Status of service(s) in the api",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Status"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "components": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "responses": {},
        "parameters": {},
        "examples": {},
        "requestBodies": {},
        "headers": {},
        "securitySchemes": {}
    },
    "security": [],
    "tags": []
}
